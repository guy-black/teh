
- test to make sure everything works as it should
- implement a -n flag to ignore trailing newline
- implement a -w flag to wrap around on rem
- write a better description for readme
- write a pretty print macros function

todo from parsed and squished macros:

- look for and remove -n and -w flag
- let flags::(Bool, Bool) where fst flags correlates to -n and snd flags to -w
- look for and remove --nostdin, if it's there then set aside last argument as text to edit
  - if it's not look for any -f flags and try to read their arguments as text files to edit
    - if any can't be read exit with descriptive error
  - if no --nostdin or -f flags then treat stdin as text to edit

# misc notes on necessity of -f flag
- but then what if the last and only argument is both a readable filename and a macro?
  this could mean apply that macro to all stdin or use it's contents as text to edit with no edits
  I could only read last arg as text to edit if there is more than one argument so if it's meant to be a macro
  it could be moved back to avoid confusion, but then what if the edits need to be a particular order?
  So I should add a -f flag to indicate a file to be read from


  ^^^ similarly to this --nostdin should make the argument directly after the target text, should also probably rename that idk I'm tired
